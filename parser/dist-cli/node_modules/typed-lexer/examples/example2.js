"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const typed_lexer_1 = require("../typed-lexer");
var State;
(function (State) {
    State[State["start"] = 0] = "start";
    State[State["inRangeBlock"] = 1] = "inRangeBlock";
})(State || (State = {}));
;
class EglLexingRules extends typed_lexer_1.StaticLexingRules {
    constructor() {
        super(State.start);
        const r = this.rules;
        const start = typed_lexer_1.matches(State.start);
        const inRangeBlock = typed_lexer_1.matches(State.inRangeBlock);
        r.addRuleWithRegexGroups(/([a-zA-Z][a-zA-Z0-9]*)(\s*)(::=)/, ["DefinedIdentifier", "WS", "ProdDef"], start);
        r.addSimpleRule(/[a-zA-Z_][a-zA-Z0-9_]*/, "Identifier", start);
        r.addSimpleRule(/\s+/, "WS", start);
        r.addSimpleRules({
            "||": "CondDisj",
            "|": "Disj",
            ".": "SingleChar",
            "\\": "Without",
            "?": "Opt",
            "*": "Star",
            "+": "PosStar",
            "(": "OpenParen",
            ")": "CloseParen",
            "#": "UnicodePropertyRef"
        }, start);
        r.addRuleWithRegexGroups(/(")(.*?)(")/, ["StringStart", "String", "StringEnd"], start);
        r.addRuleWithRegexGroups(/(')(.*?)(')/, ["StringStart", "String", "StringEnd"], start);
        r.addSimpleRule(/#x[0-9A-F]+/, "HexRef", typed_lexer_1.or(start, inRangeBlock));
        r.addSimpleRule("[", "RangeStart", start, State.inRangeBlock);
        r.addSimpleRule("]", "RangeEnd", inRangeBlock, State.start);
        r.addSimpleRule("-", "Range", inRangeBlock);
        r.addDefaultSimpleRule("String", inRangeBlock);
        r.addDefaultSimpleRule("Invalid");
    }
}
exports.EglLexingRules = EglLexingRules;
const result = new EglLexingRules()
    .lexTokensWithStr("foo ::= (bar (',' bar)*)?");
for (const t of result)
    console.log(`${t.token} (${t.str})`);
/* this code prints the following to the console:

DefinedIdentifier (foo)
WS ( )
ProdDef (::=)
WS ( )
OpenParen (()
Identifier (bar)
WS ( )
OpenParen (()
StringStart (')
String (,)
StringEnd (')
WS ( )
Identifier (bar)
CloseParen ())
Star (*)
CloseParen ())
Opt (?)

*/ 
//# sourceMappingURL=example2.js.map