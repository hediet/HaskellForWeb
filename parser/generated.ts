export enum TokenKinds {
    Invalid,
    Integer,
    Float,
    Char,
    String,
    NewLine,
    Whitespace,
    Comment,
    SingleLineComment,
    MultiLineComment,
    VariableId,
    ConstructorId,
    VariableSymbol,
    ConstructorSymbol,
    ModuleIdPart,
    ModuleIdDot,
    CaseKeyword,
    ClassKeyword,
    DataKeyword,
    DefaultKeyword,
    DerivingKeyword,
    DoKeyword,
    ElseKeyword,
    ForeignKeyword,
    IfKeyword,
    ImportKeyword,
    InKeyword,
    InfixKeyword,
    InfixlKeyword,
    InfixrKeyword,
    InstanceKeyword,
    LetKeyword,
    ModuleKeyword,
    NewtypeKeyword,
    OfKeyword,
    ThenKeyword,
    TypeKeyword,
    WhereKeyword,
    Underscore,
    DotDot,
    Colon,
    DoubleColon,
    Equals,
    Backslash,
    Bar,
    ThinArrowLeft,
    ThinArrowRight,
    AtSign,
    Tilde,
    FatArrowRight,
    OpeningParen,
    ClosingParen,
    Comma,
    Semicolon,
    OpeningBracket,
    ClosingBracket,
    Backtick,
    OpeningBrace,
    ClosingBrace,
}
export const reservedIds = {
  "case": "CaseKeyword",
  "class": "ClassKeyword",
  "data": "DataKeyword",
  "default": "DefaultKeyword",
  "deriving": "DerivingKeyword",
  "do": "DoKeyword",
  "else": "ElseKeyword",
  "foreign": "ForeignKeyword",
  "if": "IfKeyword",
  "import": "ImportKeyword",
  "in": "InKeyword",
  "infix": "InfixKeyword",
  "infixl": "InfixlKeyword",
  "infixr": "InfixrKeyword",
  "instance": "InstanceKeyword",
  "let": "LetKeyword",
  "module": "ModuleKeyword",
  "newtype": "NewtypeKeyword",
  "of": "OfKeyword",
  "then": "ThenKeyword",
  "type": "TypeKeyword",
  "where": "WhereKeyword",
  "_": "Underscore"
};
export const reservedOps = {
  "..": "DotDot",
  ":": "Colon",
  "::": "DoubleColon",
  "=": "Equals",
  "\\": "Backslash",
  "|": "Bar",
  "<-": "ThinArrowLeft",
  "->": "ThinArrowRight",
  "@": "AtSign",
  "~": "Tilde",
  "=>": "FatArrowRight"
};
export const specialTokens = {
  "(": "OpeningParen",
  ")": "ClosingParen",
  ",": "Comma",
  ";": "Semicolon",
  "[": "OpeningBracket",
  "]": "ClosingBracket",
  "`": "Backtick",
  "{": "OpeningBrace",
  "}": "ClosingBrace"
};
